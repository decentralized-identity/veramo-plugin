{"version":3,"file":"index.js","sources":["../src/agent/my-plugin.ts","../src/key-manager/key-management-system.ts","../src/key-manager/key-store.ts","../src/key-manager/secret-box.ts"],"sourcesContent":["import { IAgentPlugin } from 'daf-core'\nimport { IMyAgentPlugin, IMyAgentPluginFooArgs, IContext } from '../types/IMyAgentPlugin'\n\nconst schema = { \n  components: { \n    schemas: {\n      IMyAgentPluginFooArgs: {\n        type: \"object\",\n        properties: {\n          did: {\n            type: \"string\",\n            description: \"Decentralized identifier\"\n          },\n          bar: {\n            type: \"string\",\n            description: \"bar\"\n          },\n        }\n      }\n    }, \n    methods: {\n      myPluginFoo: {\n        description: \"Does foo\",\n        arguments: {\n          \"$ref\": \"#/components/schemas/IMyAgentPluginFooArgs\"\n        },\n        returnType: {\n          type: \"string\"\n        }\n      }\n    } \n  }\n}\n\nexport class MyAgentPlugin implements IAgentPlugin {\n  \n  readonly schema = schema\n  \n  readonly methods: IMyAgentPlugin = {\n    myPluginFoo: this.myPluginFoo.bind(this)\n  }\n\n  private async myPluginFoo(args: IMyAgentPluginFooArgs, context: IContext): Promise<string> {\n    const didDoc = await context.agent.resolveDid({ didUrl: args.did })\n    console.log(didDoc)\n    return args.bar\n  }\n}","import { TKeyType, IKey, EcdsaSignature } from 'daf-core'\nimport { AbstractKeyManagementSystem } from 'daf-key-manager'\n\nexport class KeyManagementSystem extends AbstractKeyManagementSystem {\n\n  async createKey({ type }: { type: TKeyType }): Promise<Omit<IKey, 'kms'>> {\n    let key: Omit<IKey, 'kms'>\n\n    switch (type) {\n      case 'Ed25519':\n        throw Error('KeyManagementSystem createKey Ed25519 not implemented')\n        break\n      case 'Secp256k1':\n        throw Error('KeyManagementSystem createKey Secp256k1 not implemented')\n        break\n      default:\n        throw Error('Key type not supported: ' + type)\n    }\n\n    return key\n  }\n\n  async deleteKey(args: { kid: string }) {\n    throw Error('KeyManagementSystem deleteKey not implemented')\n    return true\n  }\n\n  async encryptJWE({ key, to, data }: { key: IKey; to: IKey; data: string }): Promise<string> {\n    throw Error('KeyManagementSystem encryptJWE not implemented')\n  }\n\n  async decryptJWE({ key, data }: { key: IKey; data: string }): Promise<string> {\n    throw Error('KeyManagementSystem decryptJWE not implemented')\n  }\n\n  async signEthTX({ key, transaction }: { key: IKey; transaction: object }): Promise<string> {\n    throw Error('KeyManagementSystem signEthTX not implemented')\n  }\n\n  async signJWT({ key, data }: { key: IKey; data: string }): Promise<EcdsaSignature> {\n    throw Error('KeyManagementSystem signJWT not implemented')\n  }\n}\n","import { IKey } from 'daf-core'\nimport { AbstractKeyStore } from 'daf-key-manager'\n\nexport class KeyStore extends AbstractKeyStore {\n  async get({ kid }: { kid: string }): Promise<IKey> {\n    throw Error('KeyStore get not implemented')\n  }\n\n  async delete({ kid }: { kid: string }) {\n    throw Error('KeyStore delete not implemented')\n    return true\n  }\n\n  async import(args: IKey) {\n    throw Error('KeyStore import not implemented')\n    return true\n  }\n}\n","import { AbstractSecretBox } from 'daf-key-manager'\n\nexport class SecretBox extends AbstractSecretBox {\n  constructor(private secretKey: string) {\n    super()\n    if (!secretKey) {\n      throw Error('Secret key is required')\n    }\n  }\n\n  async encrypt(message: string): Promise<string> {\n    throw Error('SecretBox encrypt not implemented')\n  }\n\n  async decrypt(encryptedMessageHex: string): Promise<string> {\n    throw Error('SecretBox decrypt not implemented')\n  }\n}\n"],"names":["schema","components","schemas","IMyAgentPluginFooArgs","type","properties","did","description","bar","methods","myPluginFoo","arguments","$ref","returnType","MyAgentPlugin","this","bind","args","context","agent","resolveDid","didUrl","didDoc","console","log","KeyManagementSystem","createKey","Error","key","deleteKey","encryptJWE","decryptJWE","signEthTX","signJWT","AbstractKeyManagementSystem","KeyStore","get","AbstractKeyStore","SecretBox","secretKey","_this","encrypt","message","decrypt","encryptedMessageHex","AbstractSecretBox"],"mappings":"iCAGMA,EAAS,CACbC,WAAY,CACVC,QAAS,CACPC,sBAAuB,CACrBC,KAAM,SACNC,WAAY,CACVC,IAAK,CACHF,KAAM,SACNG,YAAa,4BAEfC,IAAK,CACHJ,KAAM,SACNG,YAAa,UAKrBE,QAAS,CACPC,YAAa,CACXH,YAAa,WACbI,UAAW,CACTC,KAAQ,8CAEVC,WAAY,CACVT,KAAM,cAOHU,aAAb,aAEWC,YAASf,EAETe,aAA0B,CACjCL,YAAaK,KAAKL,YAAYM,KAAKD,0BAGvBL,qBAAYO,EAA6BC,8BAChCA,EAAQC,MAAMC,WAAW,CAAEC,OAAQJ,EAAKX,qBAAvDgB,GAEN,OADAC,QAAQC,IAAIF,GACLL,EAAKT,MAXhB,wIC/BaiB,IAAAA,kGAELC,0BAAYtB,IAAAA,SAGhB,OAAQA,GACN,IAAK,UACH,MAAMuB,MAAM,yDAEd,IAAK,YACH,MAAMA,MAAM,2DAEd,QACE,MAAMA,MAAM,2BAA6BvB,GAG7C,4BAbIwB,GAHR,sCAmBQC,mBAAUZ,OACd,MAAMU,MAAM,iDApBhB,sCAwBQG,2BACJ,MAAMH,MAAM,kDAzBhB,sCA4BQI,2BACJ,MAAMJ,MAAM,kDA7BhB,sCAgCQK,0BACJ,MAAML,MAAM,iDAjChB,sCAoCQM,wBACJ,MAAMN,MAAM,+CArChB,uCAAyCO,+BCA5BC,kGACLC,oBACJ,MAAMT,MAAM,gCAFhB,6DAMI,MAAMA,MAAM,mCANhB,sDAUeV,OACX,MAAMU,MAAM,mCAXhB,uCAA8BU,oBCDjBC,cACX,WAAoBC,SAElB,IADAC,gCADkBD,GAEbA,EACH,MAAMZ,MAAM,0CAJlB,2BAQQc,iBAAQC,OACZ,MAAMf,MAAM,qCAThB,sCAYQgB,iBAAQC,OACZ,MAAMjB,MAAM,qCAbhB,uCAA+BkB"}