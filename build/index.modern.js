import{AbstractKeyManagementSystem as e,AbstractKeyStore as t,AbstractSecretBox as r}from"daf-key-manager";const n={components:{schemas:{IMyAgentPluginFooArgs:{type:"object",properties:{did:{type:"string",description:"Decentralized identifier"},bar:{type:"string",description:"bar"}}}},methods:{myPluginFoo:{description:"Does foo",arguments:{$ref:"#/components/schemas/IMyAgentPluginFooArgs"},returnType:{type:"string"}}}}};class o{constructor(){this.schema=n,this.methods={myPluginFoo:this.myPluginFoo.bind(this)}}async myPluginFoo(e,t){const r=await t.agent.resolveDid({didUrl:e.did});return console.log(r),e.bar}}class s extends e{async createKey({type:e}){switch(e){case"Ed25519":throw Error("KeyManagementSystem createKey Ed25519 not implemented");case"Secp256k1":throw Error("KeyManagementSystem createKey Secp256k1 not implemented");default:throw Error("Key type not supported: "+e)}}async deleteKey(e){throw Error("KeyManagementSystem deleteKey not implemented")}async encryptJWE({}){throw Error("KeyManagementSystem encryptJWE not implemented")}async decryptJWE({}){throw Error("KeyManagementSystem decryptJWE not implemented")}async signEthTX({}){throw Error("KeyManagementSystem signEthTX not implemented")}async signJWT({}){throw Error("KeyManagementSystem signJWT not implemented")}}class y extends t{async get({}){throw Error("KeyStore get not implemented")}async delete({}){throw Error("KeyStore delete not implemented")}async import(e){throw Error("KeyStore import not implemented")}}class m extends r{constructor(e){if(super(),this.secretKey=e,!e)throw Error("Secret key is required")}async encrypt(e){throw Error("SecretBox encrypt not implemented")}async decrypt(e){throw Error("SecretBox decrypt not implemented")}}export{s as KeyManagementSystem,y as KeyStore,o as MyAgentPlugin,m as SecretBox};
//# sourceMappingURL=index.modern.js.map
